version: 2
jobs:
  test:
    working_directory: ~/code
    docker:
      - image: circleci/android:api-28-alpha
    environment:
      JVM_OPTS: -Xmx3200m
    steps:
      - checkout
      - run:
          name: Build debug APK and release APK
          command: |
            ./gradlew :app:assembleDebug
            ./gradlew :app:assembleDebugAndroidTest
      - run:
          name: Store Google Service Account
          command: echo $GCLOUD_SERVICE_KEY > ${HOME}/gcloud-service-key.json
      - run:
          name: Authorize gcloud and set config defaults
          command: |
            sudo gcloud auth activate-service-account --key-file=${HOME}/gcloud-service-key.json
            sudo gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
      - run:
          name: Test with Firebase Test Lab
          command: |
            sudo gcloud firebase test android run --type instrumentation --app ./app/build/outputs/apk/debug/app-debug.apk --test ./app/build/outputs/apk/androidTest/debug/app-debug-androidTest.apk --directories-to-pull=/sdcard --environment-variables coverage=true,coverageFile="/sdcard/coverage.ec" > results 2>error
            cat error
            cat results
            cat error | grep -o 'https://[^"]*' | grep 'https://console.developers.google.com/storage/browser/test-lab-[a-z0-9.-]*' | tr -d '\]' > artifact_url
      - run:
          name: Create directory to store test results
          command: mkdir firebase
      - run:
          name: Download instrumented test results from Firebase Test Lab on success
          command: |
            python .circleci/get_artifact_path.py
            artifact_path="$(cat artifact_path)"
            gsutil -m cp -n -r ${GOOGLE_PROJECT_ID} gs://${artificat_path}/walleye-26-en-portrait firebase || true
      - run:
          name: Print firebase error results
          when: on_fail
          command: |
            file="$(ls error)"
            if [ $file == "error" ]; then
              cat error
            else
              echo "Firebase did not create any output"
            fi
      - store_artifacts:
          when: on_success
          path: firebase/
          destination: /firebase/
      - run:
          name: Download instrumented test results from Firebase Test Lab on fail
          when: on_fail
          command: |
            if [ "$INSTRUMENT_TEST_ARTIFACT" == required ]; then
              mkdir firebase
              python get_artifact_path.py
              artifact_path="$(cat artifact_path)"
              gsutil -m cp -n -r gs://${artifact_path}* /root/repo/firebase/ || true
            fi
      - store_artifacts:
          when: on_fail
          path: firebase/
          destination: /firebase/
#      - run:
#          name: Install gsutil dependency and copy test results data
#          command: |
#            sudo pip install -U crcmod
#            sudo gsutil -m cp -r -U `sudo gsutil ls ${GSUTIL_LINK} | tail -1` ${CIRCLE_ARTIFACTS}/ | true
#      - run:
#          name: Setup Code Climate test-reporter
#          command: |
#            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
#            chmod +x ./cc-test-reporter
#      - run:
#          name: Generate coverage report
#          command: ./gradlew jacocoTestReport
#      - run:
#          name: Upload coverage report
#          command: |
#            export JACOCO_SOURCE_PATH=app/src/main/java
#            ./cc-test-reporter format-coverage app/build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml --coverage-input-type jacoco
#            ./cc-test-reporter upload-coverage
      - run:
          name: Download dependencies
          command: ./gradlew androidDependencies
      - run:
          name: Move Firebase Coverage Report
          command: |
            mkdir -p app/build/outputs/code-coverage/connected
            cp walleye-26-en-portrait/artifacts/coverage.ec app/build/outputs/code-coverage/connected/coverage.ec
      - run:
          name: Code Climate Test Setup
          command: |
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
            chmod +x ./cc-test-reporter
      - run:
          name: Code Climate Pretest
          command: ./cc-test-reporter before-build
      - run:
          name: Generate JaCoCo report
          command: ./gradlew jacocoTestReport
      - run:
          name: Upload coverage to code climate
          command: |
            export JACOCO_SOURCE_PATH=app/src/main/java
            ./cc-test-reporter format-coverage app/build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml -t jacoco
            ./cc-test-reporter upload-coverage
workflows:
  version: 2
  test:
    jobs:
      - test